name: Deploy to production

on:
  push:
    branches: [ main ]

jobs:

  deploy:
    name: Build image and deploy to Amazon EKS
    runs-on: ubuntu-latest

    steps:
      - name: Check repo
        uses: actions/checkout@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'
        id: install

      - name: Install kustomize
        run: curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash && mv kustomize /usr/local/bin/


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Load secrets and save to env file
        run: aws secretsmanager get-secret-value --secret-id legalreferral-env --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > app.env

      - name: Load secrets and save to service-account-key.json
        run: aws secretsmanager get-secret-value --secret-id legalreferral-service-account-key --query SecretString --output text > service-account-key.json

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: legalreferral-notification
          IMAGE_TAG: "latest"
          GITHUB_SHA: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Update kube config
        run:  aws eks update-kubeconfig --name legalreferral-notification --region us-east-1

      - name: Replace image tag in deployment file
        run: |
          sed -i "s/{{IMAGE_TAG}}/${{ github.sha }}/g" eks/deployment.yaml

      - name: Deploy image to Amazon EKS
        run: |
          kubectl apply -f eks/deployment.yaml
          kubectl apply -f eks/service.yaml
          kubectl apply -f eks/issuer.yaml
          kubectl apply -f eks/ingress.yaml

      # Install Prometheus and Grafana
      - name: Install or Upgrade Prometheus and Grafana
        run: |
          kubectl get namespace monitoring || kubectl create namespace monitoring
            
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            
          helm repo update
          
          helm upgrade --install -f eks/prometheus-config.yaml prometheus prometheus-community/kube-prometheus-stack --namespace monitoring \
          --set alertmanager.persistentVolume.storageClass="gp2",server.persistentVolume.storageClass="gp2"


